generator client {
  provider = "prisma-client-js"
   output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  ADMIN
  CLIENT
  HOST
}

enum ApartmentType {
  ISLAND
  APARTMENT
  VINTAGE
  VILLA
  PENTHOUSE
  GARDEN
  POOL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Feature {
  WIFI
  AC
  HEATING
  KITCHEN
  PARKING
  POOL
  PET_FRIENDLY
  WASHER
  DRYER
  GYM
  ELEVATOR
  BALCONY
  HOT_TUB
  BREAKFAST_INCLUDED
  TV
  SMOKE_DETECTOR
  FIRE_EXTINGUISHER
  FURNISHED
  WHEELCHAIR_ACCESSIBLE
  BABY_COT
}

enum Rule {
  NO_SMOKING
  NO_PETS
  NO_PARTIES
  QUIET_HOURS
  CHECK_IN_AFTER_3PM
  CHECK_OUT_BEFORE_11AM
  NO_UNREGISTERED_GUESTS
  CLEAN_UP_AFTER_YOURSELF
  NO_ILLEGAL_ACTIVITIES
  RESPECT_NEIGHBORS
}

// Models

model User {
  id           String      @id @default(uuid())
  username     String      @unique
  email        String      @unique
  password     String
  role         Role        @default(CLIENT)
  profileImage String      @default("https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png?20150327203541")
  balance      Float       @default(0)
  hostRequest  Boolean     @default(false)
  isBanned     Boolean     @default(false)
  banDate      DateTime?
  createdAt    DateTime    @default(now())
  lastLogin    DateTime?
  apartments   Apartment[] @relation("EntrepreneurApartments")
  wishlist     Apartment[] @relation("Wishlist")
  bookings     Booking[]
  reviews      Review[]
}

model Apartment {
  id             String        @id @default(uuid())
  title          String
  type           ApartmentType
  location       String
  pricePerNight  Float
  coverImage     String
  images         String[]
  description    String
  features       Feature[]
  rules          Rule[]
  createdAt      DateTime      @default(now())
  entrepreneur   User          @relation("EntrepreneurApartments", fields: [entrepreneurId], references: [id])
  entrepreneurId String
  reviews        Review[]
  avgRating      Float         @default(0)
  wishlistedBy   User[]        @relation("Wishlist")
  bookings       Booking[]
}

model Booking {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  apartment   Apartment     @relation(fields: [apartmentId], references: [id])
  apartmentId String
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  createdAt   DateTime      @default(now())
}

model Review {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
  rating      Int       @default(0) 
  comment     String
  createdAt   DateTime  @default(now())
}

model Contact {
  id          String   @id @default(uuid())
  fullName    String
  email       String
  subject     String
  message     String
  isRead      Boolean  @default(false)
  submittedAt DateTime @default(now())
}

model Coupon {
  id              String   @id @default(uuid())
  code            String   @unique
  discountPercent Int
  validUntil      DateTime
}

model Slider {
  id       String   @id @default(uuid())
  title    String
  imageURL String
  page     String
}
