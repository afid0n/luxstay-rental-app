// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  admin
  client
  entrepreneur
}

enum ApartmentType {
  island
  apartment
  villa
  pool
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

// Models

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  password     String
  role         Role
  profileImage String?   @default("https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png?20150327203541")
  balance      Float     @default(0)
  hostRequest  Boolean   @default(false)
  isBanned     Boolean   @default(false)
  banDate      DateTime?
  createdAt    DateTime  @default(now())
  lastLogin    DateTime?

  apartments Apartment[] @relation("EntrepreneurApartments")

  wishlist Apartment[] @relation("Wishlist")
  bookings Booking[]
  reviews  Review[]
}

model Apartment {
  id            String        @id @default(uuid())
  title         String
  type          ApartmentType
  location      String
  pricePerNight Float
  coverImage    String
  images        String[]
  description   String
  features      String[]
  rules         String[]
  bookedDates   BookedDate[]
  createdAt     DateTime      @default(now())

  entrepreneur   User   @relation("EntrepreneurApartments", fields: [entrepreneurId], references: [id])
  entrepreneurId String

  reviews   Review[]
  avgRating Float    @default(0)

  wishlistedBy User[]    @relation("Wishlist")
  bookings     Booking[]
}

model BookedDate {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime

  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

model Booking {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  apartment   Apartment     @relation(fields: [apartmentId], references: [id])
  apartmentId String
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(pending)
  totalPrice  Float
  createdAt   DateTime      @default(now())
}

model Review {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
  rating      Int       @default(0) // 0-5 scale
  comment     String
  createdAt   DateTime  @default(now())
}

model Contact {
  id          String   @id @default(uuid())
  fullName    String
  email       String
  subject     String
  message     String
  isRead      Boolean  @default(false)
  submittedAt DateTime @default(now())
}

model Coupon {
  id              String   @id @default(uuid())
  code            String   @unique
  discountPercent Int
  validUntil      DateTime
}

model Slider {
  id       String @id @default(uuid())
  title    String
  imageURL String
}
